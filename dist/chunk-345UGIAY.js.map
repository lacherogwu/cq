{"version":3,"sources":["../src/core/context.ts"],"sourcesContent":["import { H3Event } from 'h3';\nimport { AsyncLocalStorage } from 'node:async_hooks';\nimport { ALS_KEY } from './constants';\n\nif (!(ALS_KEY in globalThis)) {\n\t(globalThis as any)[ALS_KEY] = new AsyncLocalStorage<H3Event>();\n}\nconst als = (globalThis as any)[ALS_KEY] as AsyncLocalStorage<H3Event>;\n\nexport function getEvent(): H3Event {\n\tconst event = als.getStore();\n\tif (!event) {\n\t\tthrow new Error('No event available. This function can only be called within an action handler.');\n\t}\n\treturn event;\n}\n\nexport function runInContext<T>(event: H3Event, fn: () => T | Promise<T>): Promise<T> {\n\treturn new Promise((resolve, reject) => {\n\t\tals.run(event, async () => {\n\t\t\ttry {\n\t\t\t\tconst result = await fn();\n\t\t\t\tresolve(result);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n}\n"],"mappings":";;;;;AACA,SAAS,yBAAyB;AAGlC,IAAI,EAAE,WAAW,aAAa;AAC7B,EAAC,WAAmB,OAAO,IAAI,IAAI,kBAA2B;AAC/D;AACA,IAAM,MAAO,WAAmB,OAAO;AAEhC,SAAS,WAAoB;AACnC,QAAM,QAAQ,IAAI,SAAS;AAC3B,MAAI,CAAC,OAAO;AACX,UAAM,IAAI,MAAM,gFAAgF;AAAA,EACjG;AACA,SAAO;AACR;AAEO,SAAS,aAAgB,OAAgB,IAAsC;AACrF,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,QAAI,IAAI,OAAO,YAAY;AAC1B,UAAI;AACH,cAAM,SAAS,MAAM,GAAG;AACxB,gBAAQ,MAAM;AAAA,MACf,SAAS,KAAK;AACb,eAAO,GAAG;AAAA,MACX;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF;","names":[]}