{"version":3,"sources":["../../src/core/index.ts","../../src/core/actions.ts"],"sourcesContent":["export { HTTPError, getCookie, getRequestFingerprint, getRequestHost, getRequestIP, getRequestProtocol, getRequestURL, getQuery, type H3Event } from 'h3';\nexport { command, query } from './actions';\nexport { getEvent } from './context';\nexport type { ActionsRegistry, Action, ActionType } from './types';\n","import type { StandardSchemaV1 } from '@standard-schema/spec';\nimport { ACTION_META_KEY } from './constants';\nimport type { Action, ActionType, MaybePromise } from './types';\n\nfunction createValidator(validateOrFn: any, maybeFn?: any) {\n\tif (!maybeFn) {\n\t\treturn (arg: any) => {\n\t\t\tif (arg !== undefined) {\n\t\t\t\tthrow new Error('This action does not accept any input');\n\t\t\t}\n\t\t};\n\t}\n\n\tif ('~standard' in validateOrFn) {\n\t\treturn (arg: any) => {\n\t\t\tconst validate = validateOrFn['~standard'].validate;\n\t\t\tconst result = validate(arg);\n\t\t\tif (result.issues) {\n\t\t\t\tconsole.dir(result, { depth: Infinity });\n\t\t\t\tthrow new Error('Invalid input: ' + JSON.stringify(result.issues));\n\t\t\t}\n\n\t\t\treturn result.value;\n\t\t};\n\t}\n\n\tthrow new Error('Invalid validator passed');\n}\n\ntype CreateAction<T extends ActionType> = {\n\t<Output>(fn: () => MaybePromise<Output>): Action<T, Output>;\n\t<Schema extends StandardSchemaV1, Output>(inputSchema: Schema, fn: (input: StandardSchemaV1.InferInput<Schema>) => MaybePromise<Output>): Action<T, Output, Schema>;\n};\n\nfunction createAction<T extends ActionType>(type: T): CreateAction<T> {\n\treturn (validateOrFn: any, maybeFn?: any) => {\n\t\tconst fn = maybeFn || validateOrFn;\n\t\tconst inputSchema = maybeFn ? validateOrFn : null;\n\t\tconst validate = createValidator(validateOrFn, maybeFn);\n\n\t\tconst action = (input?: any) => {\n\t\t\tif (inputSchema) {\n\t\t\t\tinput = validate(input);\n\t\t\t}\n\n\t\t\treturn fn(input);\n\t\t};\n\n\t\tObject.defineProperty(action, ACTION_META_KEY, {\n\t\t\tvalue: {\n\t\t\t\ttype,\n\t\t\t\tinputSchema,\n\t\t\t\thandler: action,\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t\twritable: false,\n\t\t});\n\n\t\treturn action as any;\n\t};\n}\n\nexport const query = createAction('query');\nexport const command = createAction('command');\n"],"mappings":";;;;;;;;AAAA,SAAS,WAAW,WAAW,uBAAuB,gBAAgB,cAAc,oBAAoB,eAAe,gBAA8B;;;ACIrJ,SAAS,gBAAgB,cAAmB,SAAe;AAC1D,MAAI,CAAC,SAAS;AACb,WAAO,CAAC,QAAa;AACpB,UAAI,QAAQ,QAAW;AACtB,cAAM,IAAI,MAAM,uCAAuC;AAAA,MACxD;AAAA,IACD;AAAA,EACD;AAEA,MAAI,eAAe,cAAc;AAChC,WAAO,CAAC,QAAa;AACpB,YAAM,WAAW,aAAa,WAAW,EAAE;AAC3C,YAAM,SAAS,SAAS,GAAG;AAC3B,UAAI,OAAO,QAAQ;AAClB,gBAAQ,IAAI,QAAQ,EAAE,OAAO,SAAS,CAAC;AACvC,cAAM,IAAI,MAAM,oBAAoB,KAAK,UAAU,OAAO,MAAM,CAAC;AAAA,MAClE;AAEA,aAAO,OAAO;AAAA,IACf;AAAA,EACD;AAEA,QAAM,IAAI,MAAM,0BAA0B;AAC3C;AAOA,SAAS,aAAmC,MAA0B;AACrE,SAAO,CAAC,cAAmB,YAAkB;AAC5C,UAAM,KAAK,WAAW;AACtB,UAAM,cAAc,UAAU,eAAe;AAC7C,UAAM,WAAW,gBAAgB,cAAc,OAAO;AAEtD,UAAM,SAAS,CAAC,UAAgB;AAC/B,UAAI,aAAa;AAChB,gBAAQ,SAAS,KAAK;AAAA,MACvB;AAEA,aAAO,GAAG,KAAK;AAAA,IAChB;AAEA,WAAO,eAAe,QAAQ,iBAAiB;AAAA,MAC9C,OAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA,SAAS;AAAA,MACV;AAAA,MACA,YAAY;AAAA,MACZ,UAAU;AAAA,IACX,CAAC;AAED,WAAO;AAAA,EACR;AACD;AAEO,IAAM,QAAQ,aAAa,OAAO;AAClC,IAAM,UAAU,aAAa,SAAS;","names":[]}