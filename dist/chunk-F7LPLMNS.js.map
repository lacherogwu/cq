{"version":3,"sources":["../src/core/internals/server.ts"],"sourcesContent":["import { assertMethod, defineHandler, H3, HTTPError, serveStatic, type H3Event } from 'h3';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { ACTION_META_KEY, API_PREFIX } from '../constants';\nimport { runInContext } from '../context';\nimport { serializer } from '../serializer';\nimport type { ActionsRegistry } from '../types';\nexport { serve } from 'h3';\n\nasync function getRequestInput(event: H3Event): Promise<any> {\n\tif (event.req.method === 'POST') {\n\t\treturn serializer.deserialize(await event.req.text());\n\t} else {\n\t\tconst inputParam = event.url.searchParams.get('input');\n\t\tif (!inputParam) return undefined;\n\t\treturn serializer.deserializeFromQuery(inputParam);\n\t}\n}\n\nfunction makeCqRequestHandler(actionsRegistry: ActionsRegistry) {\n\treturn defineHandler(async event => {\n\t\tassertMethod(event, ['GET', 'POST']);\n\n\t\tconst { req } = event;\n\t\tconst url = req.url?.split(API_PREFIX)[1];\n\t\tconst pathname = url?.split('?')[0];\n\t\tconst separatorIndex = pathname?.lastIndexOf('/') ?? -1;\n\t\tconst moduleKey = pathname?.slice(0, separatorIndex);\n\t\tconst actionKey = pathname?.slice(separatorIndex + 1);\n\n\t\tif (!moduleKey || !actionKey) {\n\t\t\tthrow HTTPError.status(404, 'Not Found', {\n\t\t\t\tmessage: 'Module or action not found',\n\t\t\t});\n\t\t}\n\n\t\tconst mod = actionsRegistry.get(moduleKey);\n\t\tif (!mod) {\n\t\t\tthrow HTTPError.status(404, 'Module Not Found', {\n\t\t\t\tmessage: 'The specified module could not be found',\n\t\t\t});\n\t\t}\n\n\t\tconst action = mod.get(actionKey);\n\t\tif (!action) {\n\t\t\tthrow HTTPError.status(404, 'Action Not Found', {\n\t\t\t\tmessage: 'The specified action could not be found',\n\t\t\t});\n\t\t}\n\n\t\tconst expectedMethod = action[ACTION_META_KEY].type === 'query' ? 'GET' : 'POST';\n\t\tassertMethod(event, expectedMethod);\n\n\t\ttry {\n\t\t\tconst input = await getRequestInput(event);\n\t\t\tconst result = await runInContext(event, async () => await action(input));\n\n\t\t\treturn new Response(serializer.serialize(result), {\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type': 'application/json;charset=UTF-8',\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (err instanceof HTTPError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tthrow HTTPError.status(500, 'Internal Server Error');\n\t\t}\n\t});\n}\n\nexport function makeServeStaticHandler(): ReturnType<typeof defineHandler> {\n\treturn defineHandler(event =>\n\t\tserveStatic(event, {\n\t\t\tindexNames: ['/index.html'],\n\t\t\t// @ts-ignore\n\t\t\tgetContents: id => fs.readFile(path.join(import.meta.dirname, 'client', id)).catch(() => fs.readFile(path.join(import.meta.dirname, 'client', 'index.html'))),\n\t\t\tgetMeta: async id => {\n\t\t\t\tconst stats = await fs.stat(path.join(import.meta.dirname, 'client', id)).catch(() => fs.stat(path.join(import.meta.dirname, 'client', 'index.html')).catch(() => null));\n\t\t\t\tif (stats?.isFile()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsize: stats.size,\n\t\t\t\t\t\tmtime: stats.mtimeMs,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t}),\n\t);\n}\n\nexport function createH3App(actionsRegistry: ActionsRegistry) {\n\tconst app = new H3();\n\tapp.use(`${API_PREFIX}**`, makeCqRequestHandler(actionsRegistry));\n\treturn app;\n}\n"],"mappings":"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","names":[]}