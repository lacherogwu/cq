{"version":3,"sources":["../src/core/internals/server.ts","../src/core/logger.ts"],"sourcesContent":["import { assertMethod, defineHandler, H3, HTTPError, serveStatic, type H3Event } from 'h3';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { performance } from 'node:perf_hooks';\nimport { ACTION_META_KEY, API_PREFIX } from '../constants';\nimport { runInContext } from '../context';\nimport { createLogger, defaultLogger, type LoggerOptions } from '../logger';\nimport { serializer } from '../serializer';\nimport type { Action, ActionsMap, ActionsRegistry, ActionType } from '../types';\nimport { isValidationError } from '../validation';\nexport { serve } from 'h3';\nexport { createLogger, defaultLogger, type LoggerOptions } from '../logger';\n\nasync function getRequestInput(event: H3Event): Promise<any> {\n\tif (event.req.method === 'POST') {\n\t\treturn serializer.deserialize(await event.req.text());\n\t} else {\n\t\tconst inputParam = event.url.searchParams.get('input');\n\t\tif (!inputParam) return undefined;\n\t\treturn serializer.deserializeFromQuery(inputParam);\n\t}\n}\n\nfunction makeCqRequestHandler(actionsRegistry: ActionsRegistry, loggerOptions?: LoggerOptions) {\n\tconst logger = loggerOptions ? createLogger(loggerOptions) : defaultLogger;\n\n\treturn defineHandler(async event => {\n\t\tassertMethod(event, ['GET', 'POST']);\n\n\t\tconst { req } = event;\n\t\tconst url = req.url?.split(API_PREFIX)[1];\n\t\tconst pathname = url?.split('?')[0];\n\t\tconst separatorIndex = pathname?.lastIndexOf('/') ?? -1;\n\t\tconst moduleKey = separatorIndex < 0 ? '' : pathname?.slice(0, separatorIndex);\n\t\tconst actionKey = pathname?.slice(separatorIndex + 1);\n\n\t\tif (moduleKey === undefined || actionKey === undefined) {\n\t\t\tlogger.warn('Request failed: Module or action not found', {\n\t\t\t\turl: req.url,\n\t\t\t\tpathname,\n\t\t\t});\n\t\t\tthrow HTTPError.status(404, 'Not Found', {\n\t\t\t\tmessage: 'Module or action not found',\n\t\t\t});\n\t\t}\n\n\t\tconst mod = actionsRegistry.get(moduleKey);\n\t\tif (!mod) {\n\t\t\tlogger.warn('Module not found', {\n\t\t\t\tmodule: moduleKey,\n\t\t\t\taction: actionKey,\n\t\t\t});\n\t\t\tthrow HTTPError.status(404, 'Module Not Found', {\n\t\t\t\tmessage: 'The specified module could not be found',\n\t\t\t});\n\t\t}\n\n\t\tconst action = mod.get(actionKey);\n\t\tif (!action) {\n\t\t\tlogger.warn('Action not found', {\n\t\t\t\tmodule: moduleKey,\n\t\t\t\taction: actionKey,\n\t\t\t});\n\t\t\tthrow HTTPError.status(404, 'Action Not Found', {\n\t\t\t\tmessage: 'The specified action could not be found',\n\t\t\t});\n\t\t}\n\n\t\tconst expectedMethod = action[ACTION_META_KEY].type === 'query' ? 'GET' : 'POST';\n\t\tassertMethod(event, expectedMethod);\n\n\t\tconst startTime = performance.now();\n\n\t\ttry {\n\t\t\tconst input = await getRequestInput(event);\n\n\t\t\tconst logData: any = {\n\t\t\t\tmodule: moduleKey,\n\t\t\t\taction: actionKey,\n\t\t\t\ttype: action[ACTION_META_KEY].type,\n\t\t\t};\n\n\t\t\tif (input !== undefined && input !== null) {\n\t\t\t\tconst inputStr = JSON.stringify(input);\n\t\t\t\tif (inputStr.length < 500) {\n\t\t\t\t\tlogData.input = input;\n\t\t\t\t} else {\n\t\t\t\t\tlogData.input = '[large payload]';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlogger.info('Action started', logData);\n\n\t\t\tconst result = await runInContext(event, async () => await action(input));\n\n\t\t\tconst duration = performance.now() - startTime;\n\t\t\tlogger.info('Action completed successfully', {\n\t\t\t\tmodule: moduleKey,\n\t\t\t\taction: actionKey,\n\t\t\t\tduration: `${+duration.toFixed(2)}ms`,\n\t\t\t});\n\n\t\t\treturn new Response(serializer.serialize(result), {\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type': 'application/json;charset=UTF-8',\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconst duration = +(performance.now() - startTime).toFixed(2);\n\n\t\t\tif (err instanceof HTTPError) {\n\t\t\t\tlogger.warn('Action failed with HTTP error', {\n\t\t\t\t\tmodule: moduleKey,\n\t\t\t\t\taction: actionKey,\n\t\t\t\t\tduration: `${duration}ms`,\n\t\t\t\t\tstatus: err.status,\n\t\t\t\t\terror: err.message,\n\t\t\t\t});\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tif (isValidationError(err)) {\n\t\t\t\tlogger.warn('Action failed with validation error', {\n\t\t\t\t\tmodule: moduleKey,\n\t\t\t\t\taction: actionKey,\n\t\t\t\t\tduration: `${duration}ms`,\n\t\t\t\t\terror: err.message,\n\t\t\t\t\tissues: err.issues,\n\t\t\t\t});\n\t\t\t\tthrow HTTPError.status(400, 'Bad Request', {\n\t\t\t\t\tmessage: 'Validation Error',\n\t\t\t\t\tbody: { issues: err.issues },\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlogger.error('Action failed with internal error', {\n\t\t\t\tmodule: moduleKey,\n\t\t\t\taction: actionKey,\n\t\t\t\tduration: `${duration}ms`,\n\t\t\t\terror: err instanceof Error ? err.message : String(err),\n\t\t\t\tstack: err instanceof Error ? err.stack : undefined,\n\t\t\t});\n\n\t\t\tthrow HTTPError.status(500, 'Internal Server Error');\n\t\t}\n\t});\n}\n\nexport function makeServeStaticHandler(root: string): ReturnType<typeof defineHandler> {\n\t// TODO: handle cases where user changes the build outDir\n\tconst getClientFilePath = (filepath: string) => path.join(root, 'client', filepath);\n\treturn defineHandler(event =>\n\t\tserveStatic(event, {\n\t\t\tindexNames: ['/index.html'],\n\t\t\tgetContents: async id => fs.readFile(getClientFilePath(id)).catch(() => fs.readFile(getClientFilePath('index.html'))) as any,\n\t\t\tgetMeta: async id => {\n\t\t\t\tconst stats = await fs.stat(getClientFilePath(id)).catch(() => fs.stat(getClientFilePath('index.html')).catch(() => null));\n\t\t\t\tif (stats?.isFile()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsize: stats.size,\n\t\t\t\t\t\tmtime: stats.mtimeMs,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t}),\n\t);\n}\n\nexport function createH3App(actionsRegistry: ActionsRegistry, loggerOptions?: LoggerOptions) {\n\tconst app = new H3();\n\tapp.use(`${API_PREFIX}**`, makeCqRequestHandler(actionsRegistry, loggerOptions));\n\treturn app;\n}\n\nexport function convertActionsObjectToRegistry(actions: ActionsMap): ActionsRegistry {\n\tconst registry: ActionsRegistry = new Map();\n\n\tconst inner = (obj: ActionsMap, basePath = '') => {\n\t\tfor (const [name, value] of Object.entries(obj)) {\n\t\t\tif (typeof value === 'function' && ACTION_META_KEY in value) {\n\t\t\t\tconst actionsMap = registry.get(basePath) || new Map();\n\t\t\t\tactionsMap.set(name, value);\n\t\t\t\tregistry.set(basePath, actionsMap);\n\t\t\t} else {\n\t\t\t\tinner(value, `${basePath}${basePath === '' ? '' : '/'}${name}`);\n\t\t\t}\n\t\t}\n\t};\n\n\tinner(actions);\n\n\treturn registry;\n}\n","import colors from 'picocolors';\nimport { inspect } from 'node:util';\n\nexport interface LoggerOptions {\n\tlevel?: 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';\n\tlabel?: string;\n\tformat?: 'json' | 'pretty';\n}\n\nconst LOG_LEVELS = {\n\ttrace: 0,\n\tdebug: 1,\n\tinfo: 2,\n\twarn: 3,\n\terror: 4,\n\tfatal: 5,\n} as const;\n\nexport function createLogger(options: LoggerOptions = {}) {\n\tconst { level = 'info', label = 'CQ', format = 'pretty' } = options;\n\tconst currentLogLevel = LOG_LEVELS[level];\n\n\tconst formatTimestamp = () => {\n\t\treturn new Date().toLocaleTimeString('en-US', {\n\t\t\thour12: false,\n\t\t\thour: '2-digit',\n\t\t\tminute: '2-digit',\n\t\t\tsecond: '2-digit',\n\t\t});\n\t};\n\n\tconst msgFormatMap: Record<string, string> = {\n\t\t'Action started': '→',\n\t\t'Action completed successfully': '✓',\n\t\t'Action failed with HTTP error': '⚠',\n\t\t'Action failed with validation error': '⚠',\n\t\t'Action failed with internal error': '✗',\n\t};\n\n\tconst log = (logLevel: keyof typeof LOG_LEVELS, msg: string, extra?: Record<string, any>) => {\n\t\tif (LOG_LEVELS[logLevel] < currentLogLevel) return;\n\n\t\tif (format === 'json') {\n\t\t\tconst logEntry = {\n\t\t\t\tlevel: LOG_LEVELS[logLevel],\n\t\t\t\ttime: Date.now(),\n\t\t\t\tservice: label,\n\t\t\t\tmsg,\n\t\t\t\t...extra,\n\t\t\t};\n\t\t\tconsole.log(JSON.stringify(logEntry));\n\t\t\treturn;\n\t\t}\n\n\t\tconst timestamp = formatTimestamp();\n\t\tconst coloredTime = colors.dim(timestamp);\n\t\tconst coloredLabel = colors.bold(colors.cyan(`[${label}]`));\n\n\t\tlet formattedMsg = msg;\n\t\tlet extraInfo = '';\n\n\t\tif (extra) {\n\t\t\tif (extra.module && extra.action) {\n\t\t\t\tconst actionPath = `${colors.blue(extra.module)}/${colors.green(extra.action)}`;\n\t\t\t\tformattedMsg = `${msgFormatMap[msg] || msg} ${actionPath}`;\n\t\t\t}\n\n\t\t\tif (extra.type) {\n\t\t\t\textraInfo += ` ${colors.magenta(extra.type)}`;\n\t\t\t}\n\n\t\t\tif (extra.input !== undefined) {\n\t\t\t\tif (extra.input === '[large payload]') {\n\t\t\t\t\textraInfo += ` ${colors.dim('[large payload]')}`;\n\t\t\t\t} else {\n\t\t\t\t\tconst inputStr = inspect(extra.input, {\n\t\t\t\t\t\tcolors: false,\n\t\t\t\t\t\tcompact: true,\n\t\t\t\t\t\tdepth: 2,\n\t\t\t\t\t\tbreakLength: Infinity,\n\t\t\t\t\t});\n\t\t\t\t\textraInfo += ` ${colors.dim(inputStr)}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extra.duration) {\n\t\t\t\textraInfo += ` ${colors.gray(`(${extra.duration})`)}`;\n\t\t\t}\n\n\t\t\tif (extra.error) {\n\t\t\t\textraInfo += ` ${colors.red(extra.error)}`;\n\t\t\t}\n\n\t\t\tif (extra.status) {\n\t\t\t\textraInfo += ` ${colors.yellow(extra.status)}`;\n\t\t\t}\n\t\t}\n\n\t\tconst logLine = `${coloredTime} ${coloredLabel} ${formattedMsg}${extraInfo}`;\n\n\t\tswitch (logLevel) {\n\t\t\tcase 'error':\n\t\t\tcase 'fatal':\n\t\t\t\tconsole.error(logLine);\n\t\t\t\tbreak;\n\t\t\tcase 'warn':\n\t\t\t\tconsole.warn(logLine);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(logLine);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\treturn {\n\t\tinfo: (msg: string, extra?: Record<string, any>) => log('info', msg, extra),\n\t\terror: (msg: string, extra?: Record<string, any>) => log('error', msg, extra),\n\t\twarn: (msg: string, extra?: Record<string, any>) => log('warn', msg, extra),\n\t\tdebug: (msg: string, extra?: Record<string, any>) => log('debug', msg, extra),\n\t\ttrace: (msg: string, extra?: Record<string, any>) => log('trace', msg, extra),\n\t\tfatal: (msg: string, extra?: Record<string, any>) => log('fatal', msg, extra),\n\t};\n}\n\nexport const defaultLogger = createLogger();\n"],"mappings":";;;;;;;;;;;;;AAAA,SAAS,cAAc,eAAe,IAAI,WAAW,mBAAiC;AACtF,OAAO,QAAQ;AACf,OAAO,UAAU;AACjB,SAAS,mBAAmB;;;ACH5B,OAAO,YAAY;AACnB,SAAS,eAAe;AAQxB,IAAM,aAAa;AAAA,EAClB,OAAO;AAAA,EACP,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR;AAEO,SAAS,aAAa,UAAyB,CAAC,GAAG;AACzD,QAAM,EAAE,QAAQ,QAAQ,QAAQ,MAAM,SAAS,SAAS,IAAI;AAC5D,QAAM,kBAAkB,WAAW,KAAK;AAExC,QAAM,kBAAkB,MAAM;AAC7B,YAAO,oBAAI,KAAK,GAAE,mBAAmB,SAAS;AAAA,MAC7C,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,IACT,CAAC;AAAA,EACF;AAEA,QAAM,eAAuC;AAAA,IAC5C,kBAAkB;AAAA,IAClB,iCAAiC;AAAA,IACjC,iCAAiC;AAAA,IACjC,uCAAuC;AAAA,IACvC,qCAAqC;AAAA,EACtC;AAEA,QAAM,MAAM,CAAC,UAAmC,KAAa,UAAgC;AAC5F,QAAI,WAAW,QAAQ,IAAI,gBAAiB;AAE5C,QAAI,WAAW,QAAQ;AACtB,YAAM,WAAW;AAAA,QAChB,OAAO,WAAW,QAAQ;AAAA,QAC1B,MAAM,KAAK,IAAI;AAAA,QACf,SAAS;AAAA,QACT;AAAA,QACA,GAAG;AAAA,MACJ;AACA,cAAQ,IAAI,KAAK,UAAU,QAAQ,CAAC;AACpC;AAAA,IACD;AAEA,UAAM,YAAY,gBAAgB;AAClC,UAAM,cAAc,OAAO,IAAI,SAAS;AACxC,UAAM,eAAe,OAAO,KAAK,OAAO,KAAK,IAAI,KAAK,GAAG,CAAC;AAE1D,QAAI,eAAe;AACnB,QAAI,YAAY;AAEhB,QAAI,OAAO;AACV,UAAI,MAAM,UAAU,MAAM,QAAQ;AACjC,cAAM,aAAa,GAAG,OAAO,KAAK,MAAM,MAAM,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,CAAC;AAC7E,uBAAe,GAAG,aAAa,GAAG,KAAK,GAAG,IAAI,UAAU;AAAA,MACzD;AAEA,UAAI,MAAM,MAAM;AACf,qBAAa,IAAI,OAAO,QAAQ,MAAM,IAAI,CAAC;AAAA,MAC5C;AAEA,UAAI,MAAM,UAAU,QAAW;AAC9B,YAAI,MAAM,UAAU,mBAAmB;AACtC,uBAAa,IAAI,OAAO,IAAI,iBAAiB,CAAC;AAAA,QAC/C,OAAO;AACN,gBAAM,WAAW,QAAQ,MAAM,OAAO;AAAA,YACrC,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,OAAO;AAAA,YACP,aAAa;AAAA,UACd,CAAC;AACD,uBAAa,IAAI,OAAO,IAAI,QAAQ,CAAC;AAAA,QACtC;AAAA,MACD;AAEA,UAAI,MAAM,UAAU;AACnB,qBAAa,IAAI,OAAO,KAAK,IAAI,MAAM,QAAQ,GAAG,CAAC;AAAA,MACpD;AAEA,UAAI,MAAM,OAAO;AAChB,qBAAa,IAAI,OAAO,IAAI,MAAM,KAAK,CAAC;AAAA,MACzC;AAEA,UAAI,MAAM,QAAQ;AACjB,qBAAa,IAAI,OAAO,OAAO,MAAM,MAAM,CAAC;AAAA,MAC7C;AAAA,IACD;AAEA,UAAM,UAAU,GAAG,WAAW,IAAI,YAAY,IAAI,YAAY,GAAG,SAAS;AAE1E,YAAQ,UAAU;AAAA,MACjB,KAAK;AAAA,MACL,KAAK;AACJ,gBAAQ,MAAM,OAAO;AACrB;AAAA,MACD,KAAK;AACJ,gBAAQ,KAAK,OAAO;AACpB;AAAA,MACD;AACC,gBAAQ,IAAI,OAAO;AACnB;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AAAA,IACN,MAAM,CAAC,KAAa,UAAgC,IAAI,QAAQ,KAAK,KAAK;AAAA,IAC1E,OAAO,CAAC,KAAa,UAAgC,IAAI,SAAS,KAAK,KAAK;AAAA,IAC5E,MAAM,CAAC,KAAa,UAAgC,IAAI,QAAQ,KAAK,KAAK;AAAA,IAC1E,OAAO,CAAC,KAAa,UAAgC,IAAI,SAAS,KAAK,KAAK;AAAA,IAC5E,OAAO,CAAC,KAAa,UAAgC,IAAI,SAAS,KAAK,KAAK;AAAA,IAC5E,OAAO,CAAC,KAAa,UAAgC,IAAI,SAAS,KAAK,KAAK;AAAA,EAC7E;AACD;AAEO,IAAM,gBAAgB,aAAa;;;ADlH1C,SAAS,aAAa;AAGtB,eAAe,gBAAgB,OAA8B;AAC5D,MAAI,MAAM,IAAI,WAAW,QAAQ;AAChC,WAAO,WAAW,YAAY,MAAM,MAAM,IAAI,KAAK,CAAC;AAAA,EACrD,OAAO;AACN,UAAM,aAAa,MAAM,IAAI,aAAa,IAAI,OAAO;AACrD,QAAI,CAAC,WAAY,QAAO;AACxB,WAAO,WAAW,qBAAqB,UAAU;AAAA,EAClD;AACD;AAEA,SAAS,qBAAqB,iBAAkC,eAA+B;AAC9F,QAAM,SAAS,gBAAgB,aAAa,aAAa,IAAI;AAE7D,SAAO,cAAc,OAAM,UAAS;AACnC,iBAAa,OAAO,CAAC,OAAO,MAAM,CAAC;AAEnC,UAAM,EAAE,IAAI,IAAI;AAChB,UAAM,MAAM,IAAI,KAAK,MAAM,UAAU,EAAE,CAAC;AACxC,UAAM,WAAW,KAAK,MAAM,GAAG,EAAE,CAAC;AAClC,UAAM,iBAAiB,UAAU,YAAY,GAAG,KAAK;AACrD,UAAM,YAAY,iBAAiB,IAAI,KAAK,UAAU,MAAM,GAAG,cAAc;AAC7E,UAAM,YAAY,UAAU,MAAM,iBAAiB,CAAC;AAEpD,QAAI,cAAc,UAAa,cAAc,QAAW;AACvD,aAAO,KAAK,8CAA8C;AAAA,QACzD,KAAK,IAAI;AAAA,QACT;AAAA,MACD,CAAC;AACD,YAAM,UAAU,OAAO,KAAK,aAAa;AAAA,QACxC,SAAS;AAAA,MACV,CAAC;AAAA,IACF;AAEA,UAAM,MAAM,gBAAgB,IAAI,SAAS;AACzC,QAAI,CAAC,KAAK;AACT,aAAO,KAAK,oBAAoB;AAAA,QAC/B,QAAQ;AAAA,QACR,QAAQ;AAAA,MACT,CAAC;AACD,YAAM,UAAU,OAAO,KAAK,oBAAoB;AAAA,QAC/C,SAAS;AAAA,MACV,CAAC;AAAA,IACF;AAEA,UAAM,SAAS,IAAI,IAAI,SAAS;AAChC,QAAI,CAAC,QAAQ;AACZ,aAAO,KAAK,oBAAoB;AAAA,QAC/B,QAAQ;AAAA,QACR,QAAQ;AAAA,MACT,CAAC;AACD,YAAM,UAAU,OAAO,KAAK,oBAAoB;AAAA,QAC/C,SAAS;AAAA,MACV,CAAC;AAAA,IACF;AAEA,UAAM,iBAAiB,OAAO,eAAe,EAAE,SAAS,UAAU,QAAQ;AAC1E,iBAAa,OAAO,cAAc;AAElC,UAAM,YAAY,YAAY,IAAI;AAElC,QAAI;AACH,YAAM,QAAQ,MAAM,gBAAgB,KAAK;AAEzC,YAAM,UAAe;AAAA,QACpB,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,MAAM,OAAO,eAAe,EAAE;AAAA,MAC/B;AAEA,UAAI,UAAU,UAAa,UAAU,MAAM;AAC1C,cAAM,WAAW,KAAK,UAAU,KAAK;AACrC,YAAI,SAAS,SAAS,KAAK;AAC1B,kBAAQ,QAAQ;AAAA,QACjB,OAAO;AACN,kBAAQ,QAAQ;AAAA,QACjB;AAAA,MACD;AAEA,aAAO,KAAK,kBAAkB,OAAO;AAErC,YAAM,SAAS,MAAM,aAAa,OAAO,YAAY,MAAM,OAAO,KAAK,CAAC;AAExE,YAAM,WAAW,YAAY,IAAI,IAAI;AACrC,aAAO,KAAK,iCAAiC;AAAA,QAC5C,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU,GAAG,CAAC,SAAS,QAAQ,CAAC,CAAC;AAAA,MAClC,CAAC;AAED,aAAO,IAAI,SAAS,WAAW,UAAU,MAAM,GAAG;AAAA,QACjD,SAAS;AAAA,UACR,gBAAgB;AAAA,QACjB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,KAAK;AACb,YAAM,WAAW,EAAE,YAAY,IAAI,IAAI,WAAW,QAAQ,CAAC;AAE3D,UAAI,eAAe,WAAW;AAC7B,eAAO,KAAK,iCAAiC;AAAA,UAC5C,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU,GAAG,QAAQ;AAAA,UACrB,QAAQ,IAAI;AAAA,UACZ,OAAO,IAAI;AAAA,QACZ,CAAC;AACD,cAAM;AAAA,MACP;AAEA,UAAI,kBAAkB,GAAG,GAAG;AAC3B,eAAO,KAAK,uCAAuC;AAAA,UAClD,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU,GAAG,QAAQ;AAAA,UACrB,OAAO,IAAI;AAAA,UACX,QAAQ,IAAI;AAAA,QACb,CAAC;AACD,cAAM,UAAU,OAAO,KAAK,eAAe;AAAA,UAC1C,SAAS;AAAA,UACT,MAAM,EAAE,QAAQ,IAAI,OAAO;AAAA,QAC5B,CAAC;AAAA,MACF;AAEA,aAAO,MAAM,qCAAqC;AAAA,QACjD,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU,GAAG,QAAQ;AAAA,QACrB,OAAO,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG;AAAA,QACtD,OAAO,eAAe,QAAQ,IAAI,QAAQ;AAAA,MAC3C,CAAC;AAED,YAAM,UAAU,OAAO,KAAK,uBAAuB;AAAA,IACpD;AAAA,EACD,CAAC;AACF;AAEO,SAAS,uBAAuB,MAAgD;AAEtF,QAAM,oBAAoB,CAAC,aAAqB,KAAK,KAAK,MAAM,UAAU,QAAQ;AAClF,SAAO;AAAA,IAAc,WACpB,YAAY,OAAO;AAAA,MAClB,YAAY,CAAC,aAAa;AAAA,MAC1B,aAAa,OAAM,OAAM,GAAG,SAAS,kBAAkB,EAAE,CAAC,EAAE,MAAM,MAAM,GAAG,SAAS,kBAAkB,YAAY,CAAC,CAAC;AAAA,MACpH,SAAS,OAAM,OAAM;AACpB,cAAM,QAAQ,MAAM,GAAG,KAAK,kBAAkB,EAAE,CAAC,EAAE,MAAM,MAAM,GAAG,KAAK,kBAAkB,YAAY,CAAC,EAAE,MAAM,MAAM,IAAI,CAAC;AACzH,YAAI,OAAO,OAAO,GAAG;AACpB,iBAAO;AAAA,YACN,MAAM,MAAM;AAAA,YACZ,OAAO,MAAM;AAAA,UACd;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAEO,SAAS,YAAY,iBAAkC,eAA+B;AAC5F,QAAM,MAAM,IAAI,GAAG;AACnB,MAAI,IAAI,GAAG,UAAU,MAAM,qBAAqB,iBAAiB,aAAa,CAAC;AAC/E,SAAO;AACR;AAEO,SAAS,+BAA+B,SAAsC;AACpF,QAAM,WAA4B,oBAAI,IAAI;AAE1C,QAAM,QAAQ,CAAC,KAAiB,WAAW,OAAO;AACjD,eAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG;AAChD,UAAI,OAAO,UAAU,cAAc,mBAAmB,OAAO;AAC5D,cAAM,aAAa,SAAS,IAAI,QAAQ,KAAK,oBAAI,IAAI;AACrD,mBAAW,IAAI,MAAM,KAAK;AAC1B,iBAAS,IAAI,UAAU,UAAU;AAAA,MAClC,OAAO;AACN,cAAM,OAAO,GAAG,QAAQ,GAAG,aAAa,KAAK,KAAK,GAAG,GAAG,IAAI,EAAE;AAAA,MAC/D;AAAA,IACD;AAAA,EACD;AAEA,QAAM,OAAO;AAEb,SAAO;AACR;","names":[]}