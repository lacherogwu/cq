{"version":3,"sources":["../src/core/validation.ts","../src/core/context.ts"],"sourcesContent":["const VALIDATION_ERROR_BRAND = Symbol.for('@@ValidationError');\n\nexport class ValidationError extends Error {\n\treadonly [VALIDATION_ERROR_BRAND] = true;\n\n\tissues: { code: string; path: string[]; message: string }[];\n\tconstructor(message: string, issues?: { code: string; path: string[]; message: string }[]) {\n\t\tsuper(message);\n\t\tthis.name = 'ValidationError';\n\t\tthis.issues = issues || [];\n\t\tObject.setPrototypeOf(this, ValidationError.prototype);\n\t}\n}\n\nexport function isValidationError(error: unknown): error is ValidationError {\n\treturn typeof error === 'object' && error !== null && VALIDATION_ERROR_BRAND in error && 'issues' in error;\n}\n\nexport function createValidator(validateOrFn: any, maybeFn?: any) {\n\tif (!maybeFn) {\n\t\treturn (arg: any) => {\n\t\t\tif (arg !== undefined) {\n\t\t\t\tthrow new ValidationError('This action does not accept any input');\n\t\t\t}\n\t\t};\n\t}\n\n\tif ('~standard' in validateOrFn) {\n\t\treturn (arg: any) => {\n\t\t\tconst validate = validateOrFn['~standard'].validate;\n\t\t\tconst result = validate(arg);\n\t\t\tif (result.issues) {\n\t\t\t\tthrow new ValidationError('Invalid input', result.issues);\n\t\t\t}\n\n\t\t\treturn result.value;\n\t\t};\n\t}\n\n\tthrow new ValidationError('Invalid validator passed');\n}\n","import { H3Event } from 'h3';\nimport { AsyncLocalStorage } from 'node:async_hooks';\nimport { ALS_KEY } from './constants';\n\nif (!(ALS_KEY in globalThis)) {\n\t(globalThis as any)[ALS_KEY] = new AsyncLocalStorage<H3Event>();\n}\nconst als = (globalThis as any)[ALS_KEY] as AsyncLocalStorage<H3Event>;\n\nexport function getEvent(): H3Event {\n\tconst event = als.getStore();\n\tif (!event) {\n\t\tthrow new Error('No event available. This function can only be called within an action handler.');\n\t}\n\treturn event;\n}\n\nexport function runInContext<T>(event: H3Event, fn: () => T | Promise<T>): Promise<T> {\n\treturn new Promise((resolve, reject) => {\n\t\tals.run(event, async () => {\n\t\t\ttry {\n\t\t\t\tconst result = await fn();\n\t\t\t\tresolve(result);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n}\n"],"mappings":";;;;;AAAA,IAAM,yBAAyB,OAAO,IAAI,mBAAmB;AAEtD,IAAM,kBAAN,MAAM,yBAAwB,MAAM;AAAA,EAC1C,CAAU,sBAAsB,IAAI;AAAA,EAEpC;AAAA,EACA,YAAY,SAAiB,QAA8D;AAC1F,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,SAAS,UAAU,CAAC;AACzB,WAAO,eAAe,MAAM,iBAAgB,SAAS;AAAA,EACtD;AACD;AAEO,SAAS,kBAAkB,OAA0C;AAC3E,SAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,0BAA0B,SAAS,YAAY;AACtG;AAEO,SAAS,gBAAgB,cAAmB,SAAe;AACjE,MAAI,CAAC,SAAS;AACb,WAAO,CAAC,QAAa;AACpB,UAAI,QAAQ,QAAW;AACtB,cAAM,IAAI,gBAAgB,uCAAuC;AAAA,MAClE;AAAA,IACD;AAAA,EACD;AAEA,MAAI,eAAe,cAAc;AAChC,WAAO,CAAC,QAAa;AACpB,YAAM,WAAW,aAAa,WAAW,EAAE;AAC3C,YAAM,SAAS,SAAS,GAAG;AAC3B,UAAI,OAAO,QAAQ;AAClB,cAAM,IAAI,gBAAgB,iBAAiB,OAAO,MAAM;AAAA,MACzD;AAEA,aAAO,OAAO;AAAA,IACf;AAAA,EACD;AAEA,QAAM,IAAI,gBAAgB,0BAA0B;AACrD;;;ACvCA,SAAS,yBAAyB;AAGlC,IAAI,EAAE,WAAW,aAAa;AAC7B,EAAC,WAAmB,OAAO,IAAI,IAAI,kBAA2B;AAC/D;AACA,IAAM,MAAO,WAAmB,OAAO;AAEhC,SAAS,WAAoB;AACnC,QAAM,QAAQ,IAAI,SAAS;AAC3B,MAAI,CAAC,OAAO;AACX,UAAM,IAAI,MAAM,gFAAgF;AAAA,EACjG;AACA,SAAO;AACR;AAEO,SAAS,aAAgB,OAAgB,IAAsC;AACrF,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,QAAI,IAAI,OAAO,YAAY;AAC1B,UAAI;AACH,cAAM,SAAS,MAAM,GAAG;AACxB,gBAAQ,MAAM;AAAA,MACf,SAAS,KAAK;AACb,eAAO,GAAG;AAAA,MACX;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF;","names":[]}