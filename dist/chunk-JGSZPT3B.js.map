{"version":3,"sources":["../src/core/client.ts"],"sourcesContent":["import { serializer } from './serializer';\nimport type { ActionsClient, ActionType } from './types';\nimport { API_PREFIX } from './constants';\n\ntype ProxyCallbackOpts = {\n\tpath: string[];\n\targs: unknown[];\n};\ntype ProxyCallback = (opts: ProxyCallbackOpts) => unknown;\n\nfunction createInnerProxy(callback: ProxyCallback, path: string[] = []): any {\n\treturn new Proxy(() => {}, {\n\t\tget(_target, prop: string): any {\n\t\t\treturn createInnerProxy(callback, path.concat(prop));\n\t\t},\n\t\tasync apply(_target, _thisArg, args) {\n\t\t\treturn await callback({ path, args });\n\t\t},\n\t});\n}\n\ntype HTTPHeaders = Record<string, string[] | string | undefined>;\n\ntype Opts = {\n\turl?: string;\n\theaders?: HTTPHeaders | (() => HTTPHeaders | Promise<HTTPHeaders>);\n} & DoHttpCallHooks;\n\nexport function createActionsClient<T>(opts?: Opts): ActionsClient<T> {\n\tconst { url, headers } = opts || {};\n\n\tconst getHeaders = async () => {\n\t\tif (typeof headers === 'function') {\n\t\t\treturn headers();\n\t\t}\n\t\treturn headers;\n\t};\n\n\treturn createInnerProxy(async ({ path, args }) => {\n\t\tconst [input] = args;\n\t\tconst actionType = path.at(-1);\n\t\tassertsActionType(actionType);\n\t\tconst actionPath = path.slice(0, -1).join('/');\n\n\t\treturn doHttpCall({\n\t\t\tbaseUrl: url,\n\t\t\tactionType,\n\t\t\tactionPath,\n\t\t\tinput,\n\t\t\theaders: await getHeaders(),\n\t\t\tonRequest: opts?.onRequest,\n\t\t\tonResponse: opts?.onResponse,\n\t\t\tonError: opts?.onError,\n\t\t});\n\t});\n}\n\nfunction assertsActionType(type?: string): asserts type is ActionType {\n\tif (type !== 'query' && type !== 'command') {\n\t\tthrow new Error(`Invalid action type: ${type}`);\n\t}\n}\n\ntype DoHttpCallParams = {\n\tbaseUrl?: string;\n\tactionType: ActionType;\n\tactionPath: string;\n\tinput?: any;\n\theaders?: HTTPHeaders;\n} & DoHttpCallHooks;\n\ntype DoHttpCallHooks = {\n\tonRequest?: (params: { type: ActionType; action: string; input?: any }) => void;\n\tonResponse?: (result: { type: ActionType; action: string; result: any }) => void;\n\tonError?: (result: { type: ActionType; action: string; result: Record<string, any> | null }) => void;\n};\n\nexport async function doHttpCall(params: DoHttpCallParams): Promise<any> {\n\tconst { baseUrl = '', actionType, actionPath, input, headers } = params;\n\n\tlet finalUrl = baseUrl;\n\tif (finalUrl.endsWith('/')) {\n\t\tfinalUrl = finalUrl.slice(0, -1);\n\t}\n\tfinalUrl += API_PREFIX + actionPath;\n\tif (actionType === 'query') {\n\t\tfinalUrl += `?input=${serializer.serializeForQuery(input)}`;\n\t}\n\n\tconst finalHeaders: HTTPHeaders = {\n\t\t...headers,\n\t};\n\tif (actionType === 'command') {\n\t\tfinalHeaders['Content-Type'] = 'application/json';\n\t}\n\n\tparams?.onRequest?.({\n\t\ttype: actionType,\n\t\taction: actionPath,\n\t\tinput,\n\t});\n\n\tconst response = await fetch(finalUrl, {\n\t\tmethod: actionType === 'query' ? 'GET' : 'POST',\n\t\theaders: convertHeaders(finalHeaders),\n\t\tbody: actionType === 'command' && input !== undefined ? serializer.serialize(input) : undefined,\n\t});\n\n\tconst text = await response.text();\n\tif (!response.ok) {\n\t\tconst result = await Promise.resolve(text)\n\t\t\t.then(JSON.parse)\n\t\t\t.catch(() => null);\n\t\tparams?.onError?.({\n\t\t\ttype: actionType,\n\t\t\taction: actionPath,\n\t\t\tresult,\n\t\t});\n\t\tconsole.error(`[cq] Error invoking action: ${actionPath}`, result);\n\t\tthrow new Error(result?.message || 'Unknown error');\n\t}\n\tconst result = serializer.deserialize(text);\n\tparams?.onResponse?.({\n\t\ttype: actionType,\n\t\taction: actionPath,\n\t\tresult,\n\t});\n\n\treturn result;\n}\n\nfunction convertHeaders(headers: HTTPHeaders): HeadersInit {\n\tconst result: HeadersInit = {};\n\tfor (const key in headers) {\n\t\tconst value = headers[key];\n\t\tif (Array.isArray(value)) {\n\t\t\tresult[key] = value.join(', ');\n\t\t} else if (value !== undefined) {\n\t\t\tresult[key] = value;\n\t\t}\n\t}\n\treturn result;\n}\n"],"mappings":"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","names":["result"]}