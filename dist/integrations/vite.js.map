{"version":3,"sources":["../../src/integrations/vite.ts"],"sourcesContent":["import glob from 'fast-glob';\nimport type { H3 } from 'h3';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { Readable } from 'node:stream';\nimport { text } from 'node:stream/consumers';\nimport type { ReadableStream } from 'node:stream/web';\nimport picocolors from 'picocolors';\nimport type { Plugin, ResolvedConfig, ViteDevServer } from 'vite';\nimport * as vite from 'vite';\nimport { ACTION_META_KEY, API_PREFIX, PLUGIN_NAME } from '../core/constants';\nimport { createH3App } from '../core/internals/server';\nimport type { Action, ActionsRegistry } from '../core/types';\n\nexport type CqViteOptions = {\n\t/**\n\t * Enable debug logging\n\t * @default false\n\t */\n\tdebug?: boolean;\n};\n\nexport function cq(options: CqViteOptions = {}): Plugin {\n\tconst serverPattern = /\\.server\\.(js|ts|mjs|mts)$/;\n\tconst debug = options.debug || false;\n\n\tlet viteServer: ViteDevServer;\n\tlet actionsRegistry: ActionsRegistry;\n\tlet config: ResolvedConfig;\n\tlet h3App: H3;\n\tlet log: (msg: string) => void;\n\n\treturn {\n\t\tname: PLUGIN_NAME,\n\t\tenforce: 'pre',\n\n\t\tconfig(userConfig, env) {\n\t\t\tif (env.command === 'build' && !userConfig.build?.ssr) {\n\t\t\t\treturn {\n\t\t\t\t\tbuild: {\n\t\t\t\t\t\toutDir: userConfig.build?.outDir || 'dist/client',\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\tconfigResolved(resolvedConfig) {\n\t\t\tconfig = resolvedConfig;\n\t\t\tlog = (msg: string) => {\n\t\t\t\tconst tag = picocolors.magenta(`[${PLUGIN_NAME}]`);\n\t\t\t\tconfig.logger.info(`${tag} ${msg}`, { timestamp: true });\n\t\t\t};\n\t\t},\n\n\t\tasync configureServer(server) {\n\t\t\tviteServer = server;\n\t\t\tactionsRegistry = await createActionsRegistry({ viteServer, debug, log });\n\t\t\th3App = createH3App(actionsRegistry);\n\n\t\t\tviteServer.middlewares.use(async (req, res, next) => {\n\t\t\t\tif (!req.url?.startsWith(API_PREFIX)) {\n\t\t\t\t\treturn next();\n\t\t\t\t}\n\n\t\t\t\tconst response = await h3App.request(req.url, {\n\t\t\t\t\tmethod: req.method,\n\t\t\t\t\theaders: req.headers as Record<string, string>,\n\t\t\t\t\tbody: req.method === 'POST' ? await text(req) : undefined,\n\t\t\t\t});\n\n\t\t\t\tres.statusCode = response.status;\n\t\t\t\tres.setHeaders(response.headers);\n\n\t\t\t\tif (response.body) {\n\t\t\t\t\tconst stream = Readable.fromWeb(response.body as ReadableStream);\n\t\t\t\t\tstream.pipe(res);\n\t\t\t\t} else {\n\t\t\t\t\tres.end();\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// this is used for the transform() hook to work during build\n\t\tasync buildStart() {\n\t\t\tif (config.command !== 'build') return;\n\n\t\t\tconst tempServer = await vite.createServer({\n\t\t\t\tmode: config.mode,\n\t\t\t\troot: config.root,\n\t\t\t\tlogLevel: 'silent',\n\t\t\t\tserver: {\n\t\t\t\t\tmiddlewareMode: true,\n\t\t\t\t\thmr: false,\n\t\t\t\t},\n\t\t\t\tappType: 'custom',\n\t\t\t\toptimizeDeps: {\n\t\t\t\t\tnoDiscovery: true,\n\t\t\t\t\tinclude: [],\n\t\t\t\t},\n\t\t\t\tconfigFile: false,\n\t\t\t\tplugins: [],\n\t\t\t});\n\n\t\t\tactionsRegistry = await createActionsRegistry({ viteServer: tempServer, debug, log });\n\t\t\tawait tempServer.close();\n\t\t},\n\n\t\tasync closeBundle() {\n\t\t\tif (config.command !== 'build') return;\n\n\t\t\tif (debug) {\n\t\t\t\tlog('Building standalone server...');\n\t\t\t}\n\n\t\t\tconst serverEntryCode = await generateServerEntryCode(config);\n\t\t\tconst tempEntryPath = path.join(config.root, '.cq-server-entry.mjs');\n\t\t\tawait fs.writeFile(tempEntryPath, serverEntryCode);\n\n\t\t\ttry {\n\t\t\t\tawait vite.build({\n\t\t\t\t\tconfigFile: false,\n\t\t\t\t\troot: config.root,\n\t\t\t\t\tmode: 'production',\n\t\t\t\t\tbuild: {\n\t\t\t\t\t\tssr: tempEntryPath,\n\t\t\t\t\t\toutDir: path.join(config.build.outDir, '..'),\n\t\t\t\t\t\temptyOutDir: false,\n\t\t\t\t\t\tminify: true,\n\t\t\t\t\t\trollupOptions: {\n\t\t\t\t\t\t\texternal: id => !id.startsWith('.') && !path.isAbsolute(id),\n\t\t\t\t\t\t\toutput: {\n\t\t\t\t\t\t\t\tformat: 'es',\n\t\t\t\t\t\t\t\tentryFileNames: 'server.mjs',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tlogLevel: 'info',\n\t\t\t\t});\n\n\t\t\t\tif (debug) {\n\t\t\t\t\tlog('Server bundled successfully!');\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tawait fs.unlink(tempEntryPath).catch(() => {});\n\t\t\t}\n\t\t},\n\n\t\tresolveId(id, _importer, options) {\n\t\t\tif (options?.ssr) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (serverPattern.test(id)) {\n\t\t\t\treturn { id, external: true };\n\t\t\t}\n\t\t},\n\n\t\tasync handleHotUpdate(ctx) {\n\t\t\tif (!serverPattern.test(ctx.file)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (debug) {\n\t\t\t\tlog(`HMR: Updating ${ctx.file}`);\n\t\t\t}\n\n\t\t\tawait updateActionInRegistry({ file: ctx.file, viteServer, actionsRegistry, debug, log });\n\n\t\t\tconst moduleNode = viteServer.moduleGraph.getModuleById(ctx.file);\n\t\t\treturn moduleNode ? [moduleNode] : [];\n\t\t},\n\n\t\tasync transform(_code, id, options) {\n\t\t\tif (!serverPattern.test(id) || options?.ssr) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst normalizedId = normalizePath(id);\n\t\t\tconst relativePath = path.relative(config.root, normalizedId);\n\t\t\tconst baseName = getBaseName(relativePath);\n\n\t\t\tconst actions = actionsRegistry.get(baseName);\n\t\t\tif (!actions) return;\n\n\t\t\tconst exports: [string, string, string][] = [];\n\t\t\tactions.forEach((action, name) => {\n\t\t\t\tconst actionKey = `${baseName}/${name}`;\n\t\t\t\texports.push([name, action[ACTION_META_KEY].type, actionKey]);\n\t\t\t});\n\n\t\t\treturn generateClientStub({\n\t\t\t\texports,\n\t\t\t});\n\t\t},\n\t};\n}\n\nexport default cq;\n\nfunction getBaseName(filePath: string): string {\n\treturn filePath\n\t\t.replace(/^src\\//, '')\n\t\t.replace(/\\.(js|ts|mjs|mts)$/, '')\n\t\t.replace(/\\.server$/, '');\n}\n\nasync function getServerFiles(root: string): Promise<string[]> {\n\treturn await glob('src/**/*.server.{js,ts,mjs,mts}', {\n\t\tcwd: root,\n\t\tabsolute: true,\n\t\tignore: ['**/node_modules/**'],\n\t});\n}\n\nasync function createActionsRegistry(options: { viteServer: ViteDevServer; debug?: boolean; log: (msg: string) => void }): Promise<ActionsRegistry> {\n\tconst { viteServer, debug = false, log } = options;\n\n\tconst actionsRegistry: ActionsRegistry = new Map();\n\tconst root = viteServer.config.root;\n\tconst files = await getServerFiles(root);\n\n\tif (debug) {\n\t\tlog(`Found ${files.length} server files`);\n\t}\n\n\tfor (const file of files) {\n\t\ttry {\n\t\t\tconst module = await viteServer.ssrLoadModule(file);\n\t\t\tconst relativePath = path.relative(root, file);\n\t\t\tconst baseName = getBaseName(relativePath);\n\n\t\t\tconst actionsMap = new Map<string, Action>();\n\t\t\tactionsRegistry.set(baseName, actionsMap);\n\n\t\t\tfor (const [name, value] of Object.entries(module) as [string, Action][]) {\n\t\t\t\tif (typeof value === 'function' && ACTION_META_KEY in value) {\n\t\t\t\t\tactionsMap.set(name, value);\n\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tconst actionKey = `${baseName}/${name}`;\n\t\t\t\t\t\tlog(`Registered ${value[ACTION_META_KEY].type}: ${actionKey}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsMap.size === 0) {\n\t\t\t\tactionsRegistry.delete(baseName);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog(`${picocolors.red('Error')} loading module: ${file}`);\n\t\t}\n\t}\n\n\treturn actionsRegistry;\n}\n\nfunction generateClientStub(options: { exports: [string, string, string][] }): string {\n\tconst { exports } = options;\n\treturn `import { __cq_invoke_action } from '@lachero/cq/internals/client';\n${exports.map(([name, type, actionKey]) => `export const ${name} = __cq_invoke_action('${type}', '${actionKey}');`).join('\\n')}\n`;\n}\n\nfunction normalizePath(filePath: string): string {\n\treturn filePath.replace(/\\\\/g, '/');\n}\n\nasync function generateServerEntryCode(config: ResolvedConfig): Promise<string> {\n\tconst root = config.root;\n\tconst port = config.server.port || 5173;\n\n\tconst files = await getServerFiles(root);\n\n\tconst actionsImports: { baseName: string; varName: string; import: string }[] = [];\n\tfor (const file of files) {\n\t\tconst relativePath = path.relative(root, file);\n\t\tconst baseName = getBaseName(relativePath);\n\t\tconst varName = '__cq_' + baseName.replace(/\\W+/g, '_');\n\t\tactionsImports.push({ baseName, varName, import: `import * as ${varName} from './${relativePath}';` });\n\t}\n\n\treturn `// Generated server entry by @lachero/cq\nimport { createH3App, makeServeStaticHandler, serve } from '@lachero/cq/internals/server';\n${actionsImports.map(i => i.import).join('\\n')}\n\nconst actionsRegistry = new Map([${actionsImports.map(({ baseName, varName }) => `['${baseName}', new Map(Object.entries(${varName}))]`).join(',')}]);\n\nconst app = createH3App(actionsRegistry);\napp.use('/**', makeServeStaticHandler(import.meta.dirname));\nserve(app, { port: ${port} });\n`;\n}\n\nasync function updateActionInRegistry(options: { file: string; viteServer: ViteDevServer; actionsRegistry: ActionsRegistry; debug: boolean; log: (msg: string) => void }) {\n\tconst { file, viteServer, actionsRegistry, debug, log } = options;\n\ttry {\n\t\tconst moduleNode = viteServer.moduleGraph.getModuleById(file);\n\t\tif (moduleNode) {\n\t\t\tviteServer.moduleGraph.invalidateModule(moduleNode);\n\t\t}\n\n\t\tconst module = await viteServer.ssrLoadModule(file);\n\t\tconst relativePath = path.relative(viteServer.config.root, file);\n\t\tconst baseName = getBaseName(relativePath);\n\n\t\tlet actionsMap = actionsRegistry.get(baseName);\n\t\tif (!actionsMap) {\n\t\t\tactionsMap = new Map<string, Action>();\n\t\t\tactionsRegistry.set(baseName, actionsMap);\n\t\t} else {\n\t\t\tactionsMap.clear();\n\t\t}\n\n\t\tlet actionCount = 0;\n\t\tfor (const [name, value] of Object.entries(module) as [string, Action][]) {\n\t\t\tif (typeof value === 'function' && ACTION_META_KEY in value) {\n\t\t\t\tactionsMap.set(name, value);\n\t\t\t\tactionCount++;\n\n\t\t\t\tif (debug) {\n\t\t\t\t\tconst actionKey = `${baseName}/${name}`;\n\t\t\t\t\tlog(`HMR: Updated ${value[ACTION_META_KEY].type}: ${actionKey}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (debug) {\n\t\t\tlog(`HMR: Refreshed ${baseName} with ${actionCount} action(s)`);\n\t\t}\n\t} catch (err) {\n\t\tlog(`HMR: ${picocolors.red('Error')} updating module: ${file}`);\n\t}\n}\n"],"mappings":"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","names":["options"]}